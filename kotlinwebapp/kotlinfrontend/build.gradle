group 'com.personal.demo'
version '1.0-SNAPSHOT'

apply plugin: 'kotlin2js'
apply plugin: 'kotlin-dce-js'
apply plugin: 'org.jetbrains.kotlin.frontend'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
    compile("org.jetbrains.kotlinx:kotlinx-html-js:$html_version")
}

compileKotlin2Js {
    kotlinOptions.metaInfo = true
    kotlinOptions.outputFile = "$project.buildDir.path/js/${project.name}.js"
    kotlinOptions.sourceMap = true
    kotlinOptions.moduleKind = 'commonjs'
    kotlinOptions.main = "call"
    kotlinOptions.verbose = true
}

compileTestKotlin2Js {
    kotlinOptions.metaInfo = true
    kotlinOptions.outputFile = "$project.buildDir.path/js-tests/${project.name}-tests.js"
    kotlinOptions.sourceMap = true
    kotlinOptions.moduleKind = 'commonjs'
//    kotlinOptions.moduleName = project.name + "-test"
    kotlinOptions.main = "call"
}

kotlinFrontend {
// uncomment this to specify exact nodejs version (bundle will be downloaded)
    downloadNodeJsVersion = "latest"

    sourceMaps = false

    npm {
        replaceVersion("kotlinx-html-js", "1.1.0")
        replaceVersion("kotlinx-html-shared", "1.1.0")
        replaceVersion("kotlin-js-library", "1.1.0")

        dependency("style-loader")
        dependency("react")
        dependency("react-dom")
        dependency("react-router")
        dependency("jquery")
        dependency("react-markdown")

        devDependency("css-loader")
        devDependency("style-loader")
        devDependency("babel-loader")
        devDependency("babel-core")
        devDependency("karma")
    }

    webpackBundle {
        bundleName = "main"
        publicPath = "/frontend/"
        contentPath = file('src/main/web')
        port = 8080
        proxyUrl = "http://localhost:9090"
        mode = "production"
    }
}

sourceSets {
    main {
        kotlin.srcDirs = [ 'src/main/kotlin' ]
        java.srcDirs = [ 'src/main/java' ]
        resources.srcDirs += "src/main/resources"
        output.resourcesDir = "build/js/resources"
    }
    test {
        kotlin.srcDirs = [ 'src/test/kotlin' ]
        java.srcDirs = [ 'src/test/java' ]
        resources.srcDirs += "src/test/resources"
    }
}

kotlin {
    experimental {
        coroutines "enable"
    }
}